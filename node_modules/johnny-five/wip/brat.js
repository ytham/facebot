var five = require("../lib/johnny-five.js");
var temporal = require("temporal");
// var board = new five.Board({ port: "/dev/cu.usbmodem1421" });
var board = new five.Board();
//
//
//

// TODO:

// - Work through all items in Step 17:
//   http://www.lynxmotion.com/images/html/build106.htm
//
// - Gait:
// Step 1 Shift weight to robot's right
// Step 2  Step forward
// Step 3  Shift weight to robot's left
// Step 4  Step forward
//

// rh  -25
// lh   25
// rk  -20
// lk   20
// rf   -8
// lf    8
//
// Then reverse.






board.on("ready", function() {
  var all, hips, knees, feet, scanner, task;

  var isAvoiding = false;
  var isScanning = false;
  var isTurning = false;

  var joints = [ "rf", "rk", "rh", "lf", "lk", "lh" ];

  var cinvert = {
    rev: "fwd",
    fwd: "rev",
    turn: "turn"
  };

  var legs = {};
  var inits = [
    { pin: 12, id: "rh", startAt: 100 },
    { pin: 11, id: "rk", startAt: 90 },
    { pin: 10, id: "rf", startAt: 95 },
    { pin: 9,  id: "lh", startAt: 95, isInverted: true },
    { pin: 8,  id: "lk", startAt: 85, isInverted: true },
    { pin: 7,  id: "lf", startAt: 85, isInverted: true }
  ];

  var neck = new five.Servo({ pin: 5, range: [20, 160], startAt: 90 });
  var eyes = new five.IR.Distance({
    device: "2Y0A21",
    pin: "A0",
    freq: 100
  });

  // Leg initialization
  legs = inits.reduce(function(accum, init) {
    accum[init.id] = new five.Servo(init);
    return accum;
  }, {});

  // Groupings
  all = new five.Servos();
  hips = new five.Servos([ legs.rh, legs.lh ]);
  knees = new five.Servos([ legs.rk, legs.lk ]);
  feet = new five.Servos([ legs.rf, legs.lf ]);

  function move(positions, speed) {
    joints.forEach(function(part, i) {
      legs[part].to(positions[i], speed);
    });
  }

  function step(positions, speed) {
    joints.forEach(function(part, i) {
      legs[part].step(positions[i], speed);
    });
  }

  var gaits = [
    {
      id: "fwd",
      sets: [
        {
          id: "m",
          lapse: 500,
          sequence: [
          // [  rf,  rk,  rh,  lf,  lk,  lh ]
            // [ 105, 70, 70, 75, 110, 110 ],
            // [ 75, 70, 70, 105, 110, 110 ],
            // [ 75, 110, 110, 105, 70, 70 ],
            // [ 105, 110, 110, 75, 70, 70 ]
            // [ 105, 70, 60, 75, 110, 110 ],
            // [ 75, 70, 80, 105, 110, 110 ],
            // [ 75, 110, 110, 105, 70, 70 ],
            // [ 105, 110, 110, 75, 70, 70 ]
            [ 105, 70, 70, 75, 100, 100 ],
            [ 85, 70, 70, 105, 100, 100 ],
            [ 85, 110, 110, 105, 80, 80 ],
            [ 105, 110, 110, 75, 80, 80 ]

          ]
        },
        {
          id: "long",
          lapse: 600,
          sequence: [
          // [  rf,  rk,  rh,  lf,  lk,  lh ]
            // [ 105,  45,  45,  70, 135, 135 ],
            // [  78,  45,  45, 102, 135, 135 ],
            // [  78, 135, 135, 102,  45,  45 ],
            // [ 105, 135, 135,  70,  45,  45 ]
            [ 105,  45,  45,  70, 125, 125 ],
            [  78,  45,  45, 102, 125, 125 ],
            [  78, 135, 135, 102,  50,  50 ],
            [ 105, 135, 135,  70,  50,  50 ]
          ]
        }
      ]
    },
    {
      id: "rev",
      sets: [
        {
          id: "long",
          lapse: 600,
          sequence: [
            [ 78,   45,  45, 102, 135, 135 ],
            [ 105,  45,  45,  70, 135, 135 ],
            [ 105, 135, 135,  70,  45,  45 ],
            [ 78,  135, 135, 102,  45,  45 ]
          ]
        }
      ]
    },
    {
      id: "turn",
      sets: [
        {
          id: "left",
          lapse: 600,
          sequence: [
            [ 105, 70, 70, 75, 100, 100 ],
            [ 85, 110, 110, 105, 80, 80 ],
            [ 105, 110, 110, 75, 80, 80 ]
          ]
        },
        {
          id: "right",
          lapse: 600,
          sequence: [
          // [  rf,  rk,  rh,  lf,  lk,  lh ]
            [ 75, 100, 100, 105, 70, 70 ],
            [ 105, 80, 80, 85, 110, 110 ],
            [ 75, 80, 80, 105, 110, 110 ]
          ]
        }
      ]
    },
    {
      id: "home",
      sets: [
        {
          id: "go",
          lapse: 500,
          sequence: inits.map(function(init) {
            return init.startAt;
          })
        }
      ]
    }
  ];

  var controls = gaits.reduce(function(controls, gait) {
    controls[gait.id] = gait.sets.reduce(function(seq, set) {
      seq[set.id] = function() {

        if (task) {
          task.stop();
        }

        var queue = set.sequence.map(function(sequence) {
          return {
            wait: set.lapse,
            task: function() {
              move(sequence, set.lapse);
            }
          }
        });

        queue.push({
          wait: 10,
          task: controls[gait.id][set.id]
        });

        task = temporal.queue(queue);
      };

      return seq;
    }, {});

    return controls;
  }, {});


  function scan() {
    var direction = 1;

    isScanning = true;

    // neck.center();

    scanner = temporal.loop(600, function() {
      neck.to(neck.range[(direction ^= 0x01)], 600);
    });
  }

  var last = {
    control: "long",
    direction: "rev",
    heading: 0
  };

  eyes.on("data", function() {
    var heading, direction, control;

    if (this.inches < 10) {

      heading = neck.last.degrees;

      if (scanner) {
        scanner.stop();
      }


      neck.center();

      if (isAvoiding) {
        return;
      }

      if (isTurning) {
        return;
      }

      if (heading < 90) {
        // left
        direction = "turn";
        control = "right";
      } else {
        // right
        direction = "turn";
        control = "left";
      }

      if (heading < 120 && heading > 70) {
        direction = "fwd";
        control = "long";
      }

      console.log(
        "DANGER: %d, %d, %s, %s", this.inches, heading, direction, control
      );

      isTurning = true;
      isAvoiding = true;
      isScanning = false;

      if (control !== "long") {
        console.log( "turn towards: ", control );
        console.log( "last turn towards: ", last.control );
      }

      controls[cinvert[direction]][control]();

      last.control = control;
      last.direction = direction;
      last.heading = heading;

      temporal.delay(4000, function() {
        isTurning = false;
      });
    } else {

      if (isAvoiding && !isTurning) {
        console.log(
          "RESUME: %d", this.inches
        );

        isAvoiding = false;
        controls.fwd.long();

        scan();
      } else {
        // ...
      }
    }
  });

  this.repl.inject({
    get task() {
      return task;
    },
    neck: neck,
    all: all,
    hips: hips,
    knees: knees,
    feet: feet,
    legs: legs,
    controls: controls,
    // fwd: fwd,
    // fwdlong: fwdlong,
    scan: scan,
    eyes: eyes,
    peanuts: function() {
      var direction = 0;

      task = temporal.loop(500, function() {

        if (direction) {
          feet.to(150, 500);
        } else {
          feet.to(90, 500);
        }

        direction = direction ? 0 : 1;
      });
    }
  });

// controls.turn.r()

  scan();
  controls.fwd.long();

});
